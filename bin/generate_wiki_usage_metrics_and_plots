#!/usr/bin/env Rscript

suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(SVmisc))
suppressPackageStartupMessages(library(scales))
suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(getopt))

###
# Initialize
###

# Get command line
if ("--interactive" %in% commandArgs(FALSE)) {
  # Eclipse/StatET interactive session
  switch(Sys.info()["sysname"], 
    "Linux"   = setwd("/home/shvenkat/projects/wiki/usage_metrics"), 
    "Windows" = setwd('C:/Users/shvenkat/projects/wiki/usage_metrics'),
    "CYGWIN_NT-6.1" = setwd('/home/shvenkat/projects/wiki/usage_metrics'))
  # pretend a default command line was specified
  commandLine <- c(
    "--usage-log", "usage.tab", 
    "--start-date", "2013-01-01", 
    "--end-date", "2013-12-31", 
    "--profile-by-content", "content_profile.tab", 
    "--profile-by-time", "time_profile.png", 
    "--profile-by-user", "user_profile.tab" 
  )
  name <- "thisScript"
} else {
  # assume invoked as an executable file resulting in a command line such as
  # /path/to/R --slave --no-restore --file=./script.R --args --foo bar
  commandLine <- commandArgs(TRUE) # c("--foo", "bar")
  name <- basename(strsplit(commandArgs(FALSE)[4], "=")[[1]][2]) # "script.R"
}

# Parse commandline options
opts.spec <- matrix( c( 
    "usage-log", "i", 1, "character", 
        "input file (3-column tab-delimited text) with wiki usage data produced by parseVarnishLog", 
    "start-date", "s", 1, "character", 
        "exclude requests before this date (yyyy-mm-dd)", 
    "end-date", "e", 1, "character", 
        "exclude requests after this date (yyyy-mm-dd)", 
    "profile-by-content", "o", 1, "character", 
        "output tab-delimited text file with requests by title", 
    "profile-by-time", "t", 1, "character", 
        "output PNG file with graph of requests by time", 
    "profile-by-user", "u", 1, "character", 
        "output PNG file with graph of requests by IP address", 
    "help", "h", 0, "logical", "help"), 
  ncol = 5, byrow = TRUE )
usage <- function() { 
  self.name <- name
  write(getopt(opts.spec, command = self.name, usage = TRUE), stderr())
  quit(save = "no", status = 1, runLast = FALSE)
}
opts <- tryCatch(getopt(opts.spec, commandLine),
  error = function(e) usage())
if(!is.null(opts$help)) usage()
if(is.null(opts$`usage-log`)) usage()
if(is.null(opts$`profile-by-content`)) usage()
if(is.null(opts$`profile-by-time`)) usage()
if(is.null(opts$`profile-by-user`)) usage()

# Set parameters
usageLog <- opts$`usage-log`
startDate <- opts$`start-date`
endDate <- opts$`end-date`
outputProfileByContent <- opts$`profile-by-content`
outputProfileByTime <- opts$`profile-by-time`
outputProfileByUser <- opts$`profile-by-user`

###
# Data cleanup, filtering and transformation
###

# Read data from file. Date is in seconds since epoch (1970-01-01 00:00:00 GMT)
data <- read.table(usageLog, header = TRUE, sep = "\t", quote = "", 
  col.names = c("Page", "IP", "Date"), 
  colClasses = c("character", "character", "numeric"), 
  stringsAsFactors = FALSE)

# Convert date to POSIXct for ease of analysis, reporting and plotting
data$Date <- as.POSIXct(data$Date, origin="1970-01-01", tz="GMT")

# Apply startDate and endDate cutoffs
startTime <- as.POSIXct(startDate)
endTime   <- as.POSIXct(endDate)
data <- data[startTime <= data$Date && data$Date <= endTime, ]

###
# Analyze data
###

#' Remove duplicate occurences of log events (rows)
#' 
#' An event (row) is a duplicate of an earlier event if it occurs within 
#' collapseTime of the first event and is similar i.e. has the same Page (if 
#' byPage is TRUE) and/or IP (if byIP is TRUE).
#' 
#' The original data is returned with duplicate rows removed.
#' 
#' @param data 
#'     dataframe with columns "Page", "IP" and "Date", of type string, string 
#'     and POSIXct respectively
#' @param collapseTime 
#'     integer specifying interval in seconds within which similar events are 
#'     considered duplicates
#' @param byPage
#'     boolean indicating whether Page is considered in similarity 
#' @param byIP
#'     boolean indicating whether IP is considered in similarity
#' @return
#'     dataframe
#' @author Shiv Venkatasubrahmanyam \email{shvenkat@@amgen.com}
deduplicate <- function(data, collapseTime, byPage, byIP) {
  data$collapsedDate <- (as.integer(data$Date) %/% collapseTime) * collapseTime
  dupRows <- duplicated(
    data[, c("Page", "IP", "collapsedDate")[c(byPage, byIP, TRUE)]])
  data <- data[!dupRows, c("Page", "IP", "Date")]
  data
}

# Profile unique requests by content
filteredData <- deduplicate(data, collapseTime = 86400, byPage = TRUE, 
  byIP = TRUE)
profileByContent <- as.data.frame(table(filteredData$Page))
names(profileByContent) <- c("Page", "Requests")
profileByContent <- profileByContent[
  order(profileByContent$Requests, decreasing = TRUE), ]
write.table(profileByContent, outputProfileByContent, quote = FALSE, 
  sep = "\t", row.names = FALSE, col.names = TRUE)

# Profile unique requests by IP (crude proxy for user)
filteredData <- deduplicate(data, collapseTime = 86400, byPage = TRUE, 
  byIP = TRUE)
profileByUser <- as.data.frame(table(filteredData$IP))
names(profileByUser) <- c("IP", "Requests")
profileByUser <- profileByUser[
  order(profileByUser$Requests, decreasing = TRUE), ]
write.table(profileByUser, outputProfileByUser, quote = FALSE, 
  sep = "\t", row.names = FALSE, col.names = TRUE)

# Profile unique requests by time
# Profile unique requesting users by time
# Profile unique requested pages by time
# express date in local timezone using format(data$Date, tz="", usetz=TRUE)
getTimeProfilePlot <- function(data, fillColor) {
  ggplot(data, aes(x = Date)) + 
    geom_histogram(binwidth = 86400*7, fill = fillColor, colour = "grey90") +
    scale_x_datetime(breaks = date_breaks("1 month"), 
#			minor_breaks = date_breaks("1 week"), 
			labels = date_format("%b %e")) +
    xlab("Date")
}
colors <- scales::hue_pal(h = c(270, 330), c = 20, l = 40, h.start = 0, 
  direction = 1)(3)

png(file = outputProfileByTime, width = 5.5, height = 8.5, units = "in", 
  res = 300)
#gridLayout <- grid.layout(nrow = 3, ncol = 1)
#grid.newpage()
#pushViewport(viewport(layout = gridLayout))
#align.plots.grid(gl = gridLayout, 
#  list(
p1<-getTimeProfilePlot(data = deduplicate(data, collapseTime = 86400, 
          byPage = TRUE, byIP = TRUE), fillColor = colors[1]) + 
      ylab("Unique requests (article views)") + 
      xlab(NULL) +
      theme(
        axis.text.x = element_blank(), 
        axis.title.x = element_blank(), 
        axis.ticks = element_blank(),
        plot.margin = unit(c(1, 1, 0, 0.5), "lines"))
#    1, 1), 
#  list(
p2<-getTimeProfilePlot(data = deduplicate(data, collapseTime = 86400*7, 
          byPage = FALSE, byIP = TRUE), fillColor = colors[2]) + 
      ylab("Unique users") + 
      xlab(NULL) +
      theme(
        axis.text.x = element_blank(), 
        axis.title.x = element_blank(), 
        axis.ticks = element_blank(),
        plot.margin = unit(c(0, 1, 0, 0.5), "lines")) 
#    2, 1), 
#  list(
p3<-getTimeProfilePlot(data = deduplicate(data, collapseTime = 86400*7, 
          byPage = TRUE, byIP = FALSE), fillColor = colors[3]) + 
      ylab("Unique articles viewed") +
      theme(
        axis.ticks = element_blank(),
        plot.margin = unit(c(0, 1, 0.5, 0.5), "lines")) 
#    3, 1))
grid.draw(align.plots.vert(p1, p2, p3))
dev.off()

## # basic plot alignment 
## grid.arrange(profileByTime1, profileByTime2, profileByTime3, ncol=1, 
##   main = "Wiki usage over time")
## # another method for basic plot alignment, not supported by mainline ggplot2
## ggplot2:::print.ggarrange(ggarrange(
##     profileByTime1, profileByTime2, profileByTime3, 
##     layout = ggplot2:::gglayout.matrix(mat = matrix(1:3, ncol=1, byrow = TRUE), 
##       widths = c(1), heights = c(1, 1, 1)), 
##     main = "Wiki usage over time"))
